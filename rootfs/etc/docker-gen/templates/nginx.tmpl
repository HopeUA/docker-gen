# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header   Host $host;
proxy_set_header   X-Real-IP $remote_addr;
proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header   X-Forwarded-Proto $scheme;
proxy_set_header   X-Forwarded-Host $server_name;

# Default vhost
server {
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    listen 80;

    access_log /var/log/nginx/access.log main;
    return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {
{{ range $index, $value := $containers }}

    {{ range $i, $network := $value.Networks }}
       {{ if eq $network.Name "proxy_public" }}
    # Container: {{$value.Name}}@{{$network.Name}}
    server {{ $network.IP }}:{{ $value.Env.VIRTUAL_PORT }};
       {{ end }}
    {{ end }}

{{ end }}
}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $cert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}
{{ $cert := replace $cert ".crt" "" -1 }}
{{ $cert := replace $cert ".key" "" -1 }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

server {
    server_name {{ $host }};
    listen 80;
    access_log /var/log/nginx/access.log main;
    return 301 https://$host$request_uri;
}

server {
    server_name {{ $host }};
    listen 443 ssl;
    access_log /var/log/nginx/access.log main;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    {{ if (exists "/etc/nginx/vhost.d/default") }}
    include /etc/nginx/vhost.d/default;
    {{ end }}

    location / {
        proxy_pass http://{{ trim $host }};
    }
}

{{ else }}

server {
    server_name {{ $host }};
    listen 80;
    access_log /var/log/nginx/access.log main;

    {{ if (exists "/etc/nginx/vhost.d/default") }}
    include /etc/nginx/vhost.d/default;
    {{ end }}

    location / {
        proxy_pass http://{{ trim $host }};
    }
}

{{ end }}
{{ end }}
